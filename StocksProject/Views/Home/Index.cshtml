@using Chart.Mvc.ComplexChart
@using Newtonsoft.Json
@{ ViewData["Title"] = "Home Page"; }

<div class="text-center">

    <h3 class="m-2">Top Five Technology Stocks</h3>

    <div style="width: 70%; height: 500px; margin: 0 auto"><canvas id="myChart"></canvas></div>
    <script src="lib/chart.js/dist/Chart.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>

    <script>
        var dataObj = @Html.Raw(JsonConvert.SerializeObject(this.Model));
        var datasetdata = [];
        var numEntries = dataObj.allMonthlyData.length;
        console.log(dataObj);

        for (var i = 0; i < numEntries; i++) {
            var curNumEntries = dataObj.Entries[i].Entries.length;
            var curName = dataObj.allMonthlyData[i].Symbol;
            var curColor = ['rgba(255, 0, 0, 0.7)', 'rgba(255, 128, 0, 0.7)', 'rgba(0, 0, 255, 0.7)', 'rgba(127,0,255,1)', 'rgba(225, 0, 127, 0.7)'];
            var curLabels = [];
            var curPriceData = [];


            console.log(curNumEntries);
            console.log(curName);

            for (var j = 0; j < curNumEntries; j++) {
                curPriceData[j] = dataObj.Entries[i].Entries[j].Open;
                curLabels[j] = dataObj.Entries[i].EntryDateTime[j];
            }
            //bandaid fix
            curLabels.reverse();
            curPriceData.reverse();

            console.log(curLabels);
            console.log(curPriceData);
            datasetdata[i] = {
                label: curName,
                fill: false,
                data: curPriceData,
                borderCapStyle: 'butt',
                borderDashOffset: 0.0,
                borderJoinStyle: 'miter',
                pointBorderColor: curColor[i],
                pointBackgroundColor: "#fff",
                pointBorderWidth: 1,
                pointHoverRadius: 5,
                pointHoverBackgroundColor: "rgba(75,192,192,1)",
                pointHoverBorderColor: "rgba(220,220,220,1)",
                pointHoverBorderWidth: 2,
                pointRadius: 2,
                pointHitRadius: 5,
                borderColor: curColor[i],
                borderWidth: 1.5,
                lineTension: 0
            }
        };



        function showChart() {
            var ctx = document.getElementById('myChart').getContext('2d');
            console.log(curLabels);
            console.log(datasetdata);
            var myChart = new Chart(ctx,
                {
                    type: 'line',
                    data: {
                        labels: curLabels,
                        datasets: datasetdata,
                    },
                    options: {
                        maintainAspectRatio: false
                    }
                });
        }

    </script>
    @for (int i = 0; i < @Model.Entries.Count; i++)
    {
        <div class="d-inline-block text-left card bg-light border-primary w-30 m-2" style="max-width: 20rem">
            <div class="card-body">
                <h4 class="card-title" style="margin-top: 0">@Model.Entries[i].Symbol</h4>
                <h5>Price : @Model.Entries[i].Entries[0].Open.ToString("C2")</h5>
                <div style="font-size: small">
                    <div>High Price : @Model.Entries[i].Entries[0].High.ToString("C2")</div>
                    <div>Low Price : @Model.Entries[i].Entries[0].Low.ToString("C2")</div>
                    <div>Close Price : @Model.Entries[i].Entries[0].Close.ToString("C2")</div>
                    <div>Adjusted Close : @Model.Entries[i].Entries[0].AdjustedClose.ToString("C2")</div>
                    <div>Volume : @Model.Entries[i].Entries[0].Volume.ToString()</div>
                    <div>Dividend Amount : @Model.Entries[i].Entries[0].DividendAmount.ToString("C2")</div>
                </div>
            </div>
        </div>
    }
</div>
